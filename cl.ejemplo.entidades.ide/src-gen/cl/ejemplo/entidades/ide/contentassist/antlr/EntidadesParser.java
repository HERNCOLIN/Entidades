/*
 * generated by Xtext 2.21.0
 */
package cl.ejemplo.entidades.ide.contentassist.antlr;

import cl.ejemplo.entidades.ide.contentassist.antlr.internal.InternalEntidadesParser;
import cl.ejemplo.entidades.services.EntidadesGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class EntidadesParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EntidadesGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EntidadesGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEntidadAccess().getGroup(), "rule__Entidad__Group__0");
			builder.put(grammarAccess.getEntidadAccess().getGroup_2(), "rule__Entidad__Group_2__0");
			builder.put(grammarAccess.getAtributoAccess().getGroup(), "rule__Atributo__Group__0");
			builder.put(grammarAccess.getTipoAtributoAccess().getGroup(), "rule__TipoAtributo__Group__0");
			builder.put(grammarAccess.getTipoAtributoAccess().getGroup_1(), "rule__TipoAtributo__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getEntidadesAssignment(), "rule__Model__EntidadesAssignment");
			builder.put(grammarAccess.getEntidadAccess().getNameAssignment_1(), "rule__Entidad__NameAssignment_1");
			builder.put(grammarAccess.getEntidadAccess().getSuperTipoAssignment_2_1(), "rule__Entidad__SuperTipoAssignment_2_1");
			builder.put(grammarAccess.getEntidadAccess().getAtributosAssignment_4(), "rule__Entidad__AtributosAssignment_4");
			builder.put(grammarAccess.getAtributoAccess().getTipoAssignment_0(), "rule__Atributo__TipoAssignment_0");
			builder.put(grammarAccess.getAtributoAccess().getNameAssignment_1(), "rule__Atributo__NameAssignment_1");
			builder.put(grammarAccess.getTipoAtributoAccess().getEntidadAssignment_0(), "rule__TipoAtributo__EntidadAssignment_0");
			builder.put(grammarAccess.getTipoAtributoAccess().getArrayAssignment_1_0(), "rule__TipoAtributo__ArrayAssignment_1_0");
			builder.put(grammarAccess.getTipoAtributoAccess().getLengthAssignment_1_1(), "rule__TipoAtributo__LengthAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EntidadesGrammarAccess grammarAccess;

	@Override
	protected InternalEntidadesParser createParser() {
		InternalEntidadesParser result = new InternalEntidadesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EntidadesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EntidadesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
