/*
 * generated by Xtext 2.21.0
 */
package cl.ejemplo.entidades.serializer;

import cl.ejemplo.entidades.entidades.Atributo;
import cl.ejemplo.entidades.entidades.Entidad;
import cl.ejemplo.entidades.entidades.EntidadesPackage;
import cl.ejemplo.entidades.entidades.Model;
import cl.ejemplo.entidades.entidades.TipoAtributo;
import cl.ejemplo.entidades.services.EntidadesGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EntidadesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EntidadesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EntidadesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EntidadesPackage.ATRIBUTO:
				sequence_Atributo(context, (Atributo) semanticObject); 
				return; 
			case EntidadesPackage.ENTIDAD:
				sequence_Entidad(context, (Entidad) semanticObject); 
				return; 
			case EntidadesPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case EntidadesPackage.TIPO_ATRIBUTO:
				sequence_TipoAtributo(context, (TipoAtributo) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Atributo returns Atributo
	 *
	 * Constraint:
	 *     (tipo=TipoAtributo name=ID)
	 */
	protected void sequence_Atributo(ISerializationContext context, Atributo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EntidadesPackage.Literals.ATRIBUTO__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EntidadesPackage.Literals.ATRIBUTO__TIPO));
			if (transientValues.isValueTransient(semanticObject, EntidadesPackage.Literals.ATRIBUTO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EntidadesPackage.Literals.ATRIBUTO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtributoAccess().getTipoTipoAtributoParserRuleCall_0_0(), semanticObject.getTipo());
		feeder.accept(grammarAccess.getAtributoAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns Entidad
	 *
	 * Constraint:
	 *     (name=ID superTipo=[Entidad|ID]? atributos+=Atributo*)
	 */
	protected void sequence_Entidad(ISerializationContext context, Entidad semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     entidades+=Entidad+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TipoAtributo returns TipoAtributo
	 *
	 * Constraint:
	 *     (entidad=[Entidad|ID] (array?='[' length=INT?)?)
	 */
	protected void sequence_TipoAtributo(ISerializationContext context, TipoAtributo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
